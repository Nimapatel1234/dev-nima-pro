## Project Documentation for Django Project

### **Clone the Repository**

To clone the repository, use the following commands:

```bash
git clone https://github.com/your-repo-url.git
cd your-repo-directory
```

### **Create a Virtual Environment**

Create and activate a virtual environment for the project:

1. **Create the virtual environment:**

   ```bash
   python -m venv env
   ```

2. **Activate the virtual environment:**

   - On Windows:
     ```bash
     .\env\Scripts\activate
     ```
   - On macOS/Linux:
     ```bash
     source env/bin/activate
     ```

### **Install Dependencies**

Install the required dependencies using:

```bash
pip install -r requirements.txt
```

### **Configure the Database and Environment Variables**

Create a `.env` file in the project directory and configure the following environment variables:

```
DATABASE_URL=postgresql://user:password@localhost/dbname
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
LLAMA3_MODEL_PATH=/path/to/llama3/model
```

Make sure the `DATABASE_URL` matches your PostgreSQL database credentials.

### **Run the Application Locally**

Start the application locally using:

```bash
python manage.py runserver
```

### **Deploy the Application on AWS**

#### **1. Launch an EC2 Instance**

1. Launch an Amazon EC2 instance (Ubuntu preferred).
2. Connect to the instance:
   ```bash
   ssh -i "your-key-pair.pem" ubuntu@ec2-your-instance-public-ip.compute-1.amazonaws.com
   ```

#### **2. Set Up the Instance**

Update and install required packages:

```bash
sudo apt update
sudo apt install python3-pip python3-venv
```

#### **3. Clone the Repository on the EC2 Instance**

```bash
git clone https://github.com/your-repo-url.git
cd your-repo-directory
```

#### **4. Set Up the Virtual Environment and Install Dependencies**

```bash
python3 -m venv env
source env/bin/activate
pip install -r requirements.txt
```

#### **5. Run the Django Application**

Run the Django application using:

```bash
python manage.py runserver 0.0.0.0:8000
```

#### **6. Install Nginx for Reverse Proxy**

Install and configure Nginx:

```bash
sudo apt install nginx
```

#### **7. Set Up HTTPS with Certbot**

Install Certbot and configure HTTPS:

```bash
sudo apt install certbot python3-certbot-nginx
sudo certbot --nginx
```

---

### **Database Models**

Below are the key database models and their structure:

#### **AuthGroup**

```python
class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'
```

#### **AuthGroupPermissions**

```python
class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)
```

#### **AuthPermission**

```python
class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)
```

#### **AuthUser**

```python
class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'
```

#### **BooksAuthor**

```python
class BooksAuthor(models.Model):
    birth_year = models.SmallIntegerField(blank=True, null=True)
    death_year = models.SmallIntegerField(blank=True, null=True)
    name = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'books_author'
```

#### **BooksBook**

```python
class BooksBook(models.Model):
    download_count = models.IntegerField(blank=True, null=True)
    gutenberg_id = models.IntegerField(unique=True)
    media_type = models.CharField(max_length=16)
    title = models.CharField(max_length=1024, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'books_book'
```

#### **BooksBookAuthors**

```python
class BooksBookAuthors(models.Model):
    book = models.ForeignKey(BooksBook, models.DO_NOTHING)
    author = models.ForeignKey(BooksAuthor, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'books_book_authors'
        unique_together = (('book', 'author'),)
```

#### **DjangoContentType**

```python
class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)
```

### **Authentication Implementation**

Use **OAuth2** or **JWT** to secure your API endpoints.

#### Example with **JWT**:

1. Install `djangorestframework-simplejwt`:

   ```bash
   pip install djangorestframework-simplejwt
   ```

2. Update `settings.py`:

   ```python
   REST_FRAMEWORK = {
       'DEFAULT_AUTHENTICATION_CLASSES': (
           'rest_framework_simplejwt.authentication.JWTAuthentication',
       ),
   }
   ```

3. Add JWT URLs to `urls.py`:

   ```python
   from rest_framework_simplejwt.views import (
       TokenObtainPairView,
       TokenRefreshView,
   )

   urlpatterns += [
       path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
       path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
   ]
   ```

Now your API endpoints are secured with JWT-based authentication.

---

This document provides a clear guide for setting up, running, and deploying your Django project with proper database configuration and authentication. Let me know if you need further customization!

